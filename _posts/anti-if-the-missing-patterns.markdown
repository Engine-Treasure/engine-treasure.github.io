# 反 if: 遗失的模式

约十年前，我邂逅了[反 if 运动](http://antiifcampaign.com/)，当时觉得这真是一个荒诞的概念。不用 if 语句，拿什么写一个有用的程序？荒谬。

然后，我开始思考：你还记得上周那段不得不理解却严重嵌套的代码吗？它对吗？要是有一种方式能使这段代码更简单就好了。

不幸的是，反 if 运动的网站缺乏实际可行的建议。本文的目的就在于弥补它的不足，为读者提供一些需要时切实可用的模式。在这之前，让我们先来看一看 if 语句带来的一些问题。

## if 语句带来的问题

if 语句带来的第一个问题是，它们很容易地使代码的修改变坏。我们从写一个新的 if 语句的开始:

```java
public void theProblem(boolean someCondition){
    // 共享状态

    if(someCondition){
        // 代码块A
    } else {
        // 代码块B
    }
}
```

现在看来，并不太坏，但我们已经为自己带来了一些问题。当我阅读这段代码时，我不得不检查代码块 A 和 B 是如何修改相同的共享状态的。一开始，阅读这段代码是容易的。然而，随着代码量的增大，代码的耦合变得越来越复杂，阅读代码也就变得越来越困难了。

你经常会看到上述代码片段的滥用——严重嵌套的 if 语句以及局部返回。这些都使通过路由逻辑分析业务逻辑变得困难。

if 语句的第二个问题是重复所带来的。这意味着作用域概念的遗失。将不必要放在一起的代码放在一起，会使代码的耦合性剧增，从而使代码的阅读和修改变得更加困难。

if 语句带来的第三个问题是，你不得不在脑海中模拟代码的执行。你必须把自己当作一台迷你计算机。这将耗费你的精力，而精力更应该放在思考如何求解问题上，而不是思考这错综复杂的代码是如何交织在一起的。
